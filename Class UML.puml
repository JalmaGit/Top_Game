@startuml
'https://plantuml.com/class-diagram

class raycaster{
    + updateRayCasterDirections()
    + checkForCollisionStep()
    - creataRayCaster()
}

struct BoxParameters{
    + threepp::Vector3 position
    + threepp::Vector3 size
}

struct MyListener {
    + onKeyPressed()
    + onKeyRealise()
    + buttonPressed()
}

class mapFileReader{
    + read()
    - parseVectorData()
}

class KeyChecker{
    + setKeyInput()
    + getKeyInput()
}

class worldVisualizer{
    + threepp::Mesh flor
    + vector<threepp::Mesh> boxes

    + addBox()
    - createPlane()
    - createBox()
}
class worldLayer{
    + threepp::Scene layer
}

class spikeLayer{
    + threepp::Scene layer
    + SpikeMath spikemath
    - spikePositions
}

class spikeVisualizer{
    + vector<threepp::Mesh> spikes
    + createSpike()
}

class spikeMath{
    - int damage
    + setNedDamage()
    + dealDamage()
}

class cameraAttacher{
    + setDistanceFromObj()
    + setPosition()
    + setCameraHeight()
    + setCameraAngle()
    + updateTrailingCameara()
    + getPosition()
    + getDistanceFromObj()
    + getCameraAngle()
}

class moveAble{
    + threepp::Vector3 direction
    + threepp::Vector3 position
    + threepp::Quaternion quaternion
    + const threepp::Vector3upDirection

    + setForceVector()
    + setRotation()
    + setPosition()
    + setBaseSpeed()
    + setTurnSpeed()
    + setResetPosition()
    + getPosition()
    + getRotation()
    + getBaseSpeed()
    + getTurnSpeed()
    + move()
    + resetPosAndRotation()
    - rotateBy()
    - moveFor()
}

class player{
    - int health
    - int score

    + setHealth()
    + setScore()
    + getHealth()
    + getScore()
    + addScore()
    + removeScore()
    + takeDamage()
}

class playerCamera {
    + threepp::PerspectiveCamera camera
    + updateCameraPosition()
}

class playerVisualizer{
    + threepp::Mesh playerModel
    + setPlayerPosition()
    - playerModelCreation()
}

class CoinLayer{
    + threepp::Scene layer
    + setRandomCoinPosition()
    - vector<threepp::Vector3> coinPositions
}

class CoinMath {
    + threepp::Vector3 position
    + givePoints()
    + setPossiblePositions()
    + getNewPosition()
}

class CoinVisualizer{
    + threepp::Mesh coin
    + updateCoinPosition()
    + createCoin()
}

class game{
    + threepp::Scene scene
    + running()
    - setSpotLight()
    - resetPlayer()
}



CoinMath *-- CoinLayer
CoinVisualizer *-- CoinLayer
mapFileReader *-- CoinLayer

spikeMath *-- spikeLayer
spikeVisualizer *-- spikeLayer
mapFileReader *-- spikeLayer

worldVisualizer *-- worldLayer
mapFileReader *-- worldLayer

moveAble <|-- player

MyListener *-- KeyChecker

player *-- game
playerCamera *-- game
playerVisualizer *-- game
cameraAttacher *-- game
worldLayer *-- game
CoinLayer *-- game
spikeLayer *-- game
raycaster *-- game

BoxParameters *-- mapFileReader
KeyChecker *-- game



@enduml
